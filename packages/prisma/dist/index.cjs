var e=Object.create,t=Object.defineProperty,n=Object.getOwnPropertyDescriptor,r=Object.getOwnPropertyNames,i=Object.getPrototypeOf,a=Object.prototype.hasOwnProperty,o=(e,i,o,s)=>{if(i&&typeof i==`object`||typeof i==`function`)for(var c=r(i),l=0,u=c.length,d;l<u;l++)d=c[l],!a.call(e,d)&&d!==o&&t(e,d,{get:(e=>i[e]).bind(null,d),enumerable:!(s=n(i,d))||s.enumerable});return e},s=(n,r,a)=>(a=n==null?{}:e(i(n)),o(r||!n||!n.__esModule?t(a,`default`,{value:n,enumerable:!0}):a,n));let c=require(`bcrypt`);c=s(c);var l=class{#client;constructor(e){this.client=e,this.#client=e}async createOTP({config:e},{...t}){let n=Math.min(Math.max(e?.otpConfig?.length??6,4),8),r=Array.from({length:n},()=>Math.floor(Math.random()*10)).join(``),i=e?.otpConfig?.expiresIn??300*1e3,a=new Date(Date.now()+i),o=await c.default.hash(r,10),s;try{s=await this.#client.otp.update({where:{id:t.id},data:{code:o,isUsed:!1,purpose:t.purpose,expiresAt:a}})}catch(e){e.code===`P2025`&&(s=await this.#client.otp.create({data:{id:t.id,code:o,isUsed:!1,purpose:t.purpose,expiresAt:a}}))}return{code:r,purpose:s.purpose,expiresAt:a}}async verifyOTP({...e}){let t=await this.#client.otp.findFirst({where:{id:e.id}});return!t||!await c.default.compare(e.code,t.code)||t.isUsed||t.expiresAt.getTime()<Date.now()||t.purpose!==e.purpose?{isValid:!1}:(await this.#client.otp.update({where:{id:t.id},data:{isUsed:!0}}),{isValid:!0})}async findAccountById({id:e}){return await this.#client.auth.findFirst({where:{id:e}})}async findAccountWithCredential({...e}){return await this.#client.auth.findFirst({where:{OR:[{email:e.email},{phoneNumber:e.phoneNumber}]},select:e.select})}async createAccount({...e}){return await this.#client.auth.create({data:e.data})}async removeAndAddRefreshToken({id:e,refreshToken:t,select:n,newRefreshToken:r}){let i=await this.findAccountById({id:e});if(!i)throw Error(`account-not-found: ${e}`);let a=i?.refreshTokens?.filter(e=>e!==t);return r&&(a?.push(r),a=Array.from(new Set(a))),this.#client.auth.update({where:{id:e},data:{refreshTokens:{set:a}},select:n})}async updateAccountLogin({...e}){return this.#client.auth.update({where:{id:e.id},data:{lastLogin:new Date,refreshTokens:{push:e.refreshToken}},select:e.select})}async updateAccount({...e}){return await this.#client.auth.update({where:{id:e.id},data:e.data})}async deleteAccount({id:e}){return await this.#client.auth.delete({where:{id:e}})}};exports.PrismaProvider=l;