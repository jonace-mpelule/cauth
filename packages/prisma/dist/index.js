import e from"bcrypt";var t=class{#client;constructor(e){this.client=e,this.#client=e}async createOTP({config:t},{...n}){let r=Math.min(Math.max(t?.otpConfig?.length??6,4),8),i=Array.from({length:r},()=>Math.floor(Math.random()*10)).join(``),a=t?.otpConfig?.expiresIn??300*1e3,o=new Date(Date.now()+a),s=await e.hash(i,10),c;try{c=await this.#client.otp.update({where:{id:n.id},data:{code:s,isUsed:!1,purpose:n.purpose,expiresAt:o}})}catch(e){e.code===`P2025`&&(c=await this.#client.otp.create({data:{id:n.id,code:s,isUsed:!1,purpose:n.purpose,expiresAt:o}}))}return{code:i,purpose:c.purpose,expiresAt:o}}async verifyOTP({...t}){let n=await this.#client.otp.findFirst({where:{id:t.id}});return!n||!await e.compare(t.code,n.code)||n.isUsed||n.expiresAt.getTime()<Date.now()||n.purpose!==t.purpose?{isValid:!1}:(await this.#client.otp.update({where:{id:n.id},data:{isUsed:!0}}),{isValid:!0})}async findAccountById({id:e}){return await this.#client.auth.findFirst({where:{id:e}})}async findAccountWithCredential({...e}){return await this.#client.auth.findFirst({where:{OR:[{email:e.email},{phoneNumber:e.phoneNumber}]},select:e.select})}async createAccount({...e}){return await this.#client.auth.create({data:e.data})}async removeAndAddRefreshToken({id:e,refreshToken:t,select:n,newRefreshToken:r}){let i=await this.findAccountById({id:e});if(!i)throw Error(`account-not-found: ${e}`);let a=i?.refreshTokens?.filter(e=>e!==t);return r&&(a?.push(r),a=Array.from(new Set(a))),this.#client.auth.update({where:{id:e},data:{refreshTokens:{set:a}},select:n})}async updateAccountLogin({...e}){return this.#client.auth.update({where:{id:e.id},data:{lastLogin:new Date,refreshTokens:{push:e.refreshToken}},select:e.select})}async updateAccount({...e}){return await this.#client.auth.update({where:{id:e.id},data:e.data})}async deleteAccount({id:e}){return await this.#client.auth.delete({where:{id:e}})}};export{t as PrismaContractor};